// Test-Driven Developement
// goals : clean code that works.
// how to ?
//  1. 실패할 경우, 새로운 코드를 작성한다. (빨강, 초록)
//  2. 중복을 제거한다. (리팩토링)

// Part 1 Money Example

// Chapter 1 다중 통화를 지원하는 Money 객체
// 우선적으로 할일 목록 작성하기
// 할일을 기반으로 러프하게 테스트 코드 작성하기 (main.test.ts 참고)
// 테스트코드에서 발생하는 문제를 할일 목록에 추가
// 하나씩 해결하기

export class Dollar {
  amount: number;

  constructor(amount: number) {
    // 2. 초록신호를 만나기 위해 강제로 값을 넣어준다.
    // this.amount = 10;
    // 4. 3을 통해 만들어진 메서드가 있으니 파라미터 값을 프로퍼티에 할당해야 한다.
    this.amount = amount;
  }

  times(multiplier) {
    // 1. 우선적으로는 스텁 구현(컴파일을 위해 껍데기만 만들어두는 것)
    // 3. 2에서 할당한 정적값을 동적으로 바꾸기 위해 메서드를 변경한다.
    // ** 작은 단계를 밟아가는게 문제의 크기를 조절할 수 있는 능력을 길러준다.
    // this.amount = 5*2
    // 4. 정적으로 값을 만들지 말고, 파라미터를 이용하여 프로퍼티를 변경할 필요성이 있다.
    this.amount *= multiplier;
  }
}

// 테스트의 순서 (p.47)
// 1. 작은 테스트를 하나 추가한다.
// 2. 모든 테스트를 실행해서 테스트가 실패하는 것을 확인한다.
// 3. 조금 수정한다.
// 4. 모든 테스트를 실행해서 테스트가 성공하는 것을 확인한다.
// 5. 중복을 제거하기 위해 리팩토링을 한다.

// 의존성과 중복 (의존성은 문제, 중복은 문제의 징후)

//
